# TODO: Combine with fastly.tf so that we can layer the ngwaf stuff  for testing
# terraform import fastly_service_vcl.cdn 1d1Bii4LcJ9joSaowpIdb3 && terraform show:
resource "fastly_service_vcl" "cdn" {
    active_version     = 140
    cloned_version     = 140
    comment            = null
    default_host       = null
    default_ttl        = 3600
    force_refresh      = false
    http3              = false
    id                 = "z5nOzklFYCXDAUiLeqvS25"
    imported           = false
    name               = "test.python.org"
    stale_if_error     = false
    stale_if_error_ttl = 43200
    version_comment    = null

    acl {
        acl_id        = "6Xx3rqKOY0FjQ2CuoS9D8I"
        force_destroy = false
        name          = "Generated_by_IP_block_list"
    }

    backend {
      name = "cabotage"
      address = "test-pythondotorg.ingress.us-east-2.psfhosted.computer"
      port = 443
      shield = "iad-va-us"
      auto_loadbalance = false
      ssl_check_cert = true
      ssl_cert_hostname = "test-pythondotorg.ingress.us-east-2.psfhosted.computer"
      ssl_sni_hostname = "test-pythondotorg.ingress.us-east-2.psfhosted.computer"
      weight = 100
      max_conn = 200
      connect_timeout = 1000
      first_byte_timeout = 30000
      between_bytes_timeout = 10000
    }

    backend {
      name = "loadbalancer"
      address = "lb.nyc1.psf.io"
      shield = "iad-va-us"
      healthcheck = "HAProxy Status"
      auto_loadbalance = false
      ssl_check_cert = true
      ssl_cert_hostname = "lb.psf.io"
      ssl_sni_hostname = "lb.psf.io"
      ssl_ca_cert = "" # TODO(@ee)
      weight = 100
      max_conn = 200
      connect_timeout = 1000
      first_byte_timeout = 15000
      between_bytes_timeout = 10000
    }

    cache_setting {
        action          = "pass"
        cache_condition = "Force Pass No-Cache No-Store"
        name            = "Pass No-Cache No-Store"
        stale_ttl       = 0
        ttl             = 0
    }

    condition {
        name      = "Force Pass No-Cache No-Store"
        priority  = 10
        statement = "beresp.http.Cache-Control ~ \"(no-cache|no-store)\""
        type      = "CACHE"
    }
    condition {
        name      = "Generated by IP block list"
        priority  = 0
        statement = "client.ip ~ Generated_by_IP_block_list"
        type      = "REQUEST"
    }
    condition {
        name      = "HSTS w/ subdomains"
        priority  = 10
        statement = "req.http.host == \"test.python.org\""
        type      = "RESPONSE"
    }
    condition {
        name      = "HSTS w/o subdomain"
        priority  = 10
        statement = "req.http.host == \"test.python.org\""
        type      = "RESPONSE"
    }
    condition {
        name      = "Homepage"
        priority  = 10
        statement = "req.url.path ~ \"^/$\""
        type      = "REQUEST"
    }
    condition {
        name      = "Is Download"
        priority  = 10
        statement = "req.url ~ \"^/ftp/\""
        type      = "REQUEST"
    }
    condition {
        name      = "Is Not Download"
        priority  = 5
        statement = "req.url !~ \"^/ftp/\""
        type      = "REQUEST"
    }
    condition {
        name      = "Uncacheable URLs"
        priority  = 10
        statement = "req.url ~ \"^/(api|admin)/\""
        type      = "REQUEST"
    }
    condition {
        name      = "apex redirect"
        priority  = 10
        statement = "req.http.Host == \"test.python.org\""
        type      = "RESPONSE"
    }
    condition {
        name      = "apex"
        priority  = 1
        statement = "req.http.host == \"test.python.org\""
        type      = "REQUEST"
    }

    domain {
        comment = null
        name    = "test.python.org"
    }
    domain {
        comment = null
        name    = "test.python.org"
    }

    gzip {
        cache_condition = null
        content_types   = [
            "application/javascript",
            "text/css",
            "application/javascript",
            "text/javascript",
            "application/json",
            "application/vnd.ms-fontobject",
            "application/x-font-opentype",
            "application/x-font-truetype",
            "application/x-font-ttf",
            "application/xml",
            "font/eot",
            "font/opentype",
            "font/otf",
            "image/svg+xml",
            "image/vnd.microsoft.icon",
            "text/plain",
            "text/xml",
        ]
        extensions      = [
            null,
        ]
        name            = "Default rules"
    }

    header {
        action             = "delete"
        cache_condition    = null
        destination        = "http.Cookie"
        ignore_if_set      = false
        name               = "Remove cookies"
        priority           = 10
        regex              = null
        request_condition  = "Is Download"
        response_condition = null
        source             = null
        substitution       = null
        type               = "request"
    }
    header {
        action             = "set"
        cache_condition    = null
        destination        = "backend"
        ignore_if_set      = false
        name               = "Is Download Director"
        priority           = 10
        regex              = null
        request_condition  = "Is Download"
        response_condition = null
        source             = "F_lb_nyc1_psf_io"
        substitution       = null
        type               = "request"
    }
    header {
        action             = "set"
        cache_condition    = null
        destination        = "backend"
        ignore_if_set      = false
        name               = "Is Not Download Backend"
        priority           = 10
        regex              = null
        request_condition  = "Is Not Download"
        response_condition = null
        source             = "F_cabotage"
        substitution       = null
        type               = "request"
    }
    header {
        action             = "set"
        cache_condition    = null
        destination        = "http.Fastly-Token"
        ignore_if_set      = false
        name               = "Fastly Token"
        priority           = 10
        regex              = null
        request_condition  = null
        response_condition = null
        source             = var.FASTLY_HEADER_TOKEN
        substitution       = null
        type               = "request"
    }
    header {
        action             = "set"
        cache_condition    = null
        destination        = "http.Location"
        ignore_if_set      = false
        name               = "www redirect"
        priority           = 10
        regex              = null
        request_condition  = null
        response_condition = "apex redirect"
        source             = "\"https://test.python.org\" + req.url"
        substitution       = null
        type               = "response"
    }
    header {
        action             = "set"
        cache_condition    = null
        destination        = "http.Strict-Transport-Security"
        ignore_if_set      = false
        name               = "HSTS w/ subdomains"
        priority           = 10
        regex              = null
        request_condition  = null
        response_condition = "HSTS w/ subdomains"
        source             = "\"max-age=63072000; includeSubDomains; preload\""
        substitution       = null
        type               = "response"
    }
    header {
        action             = "set"
        cache_condition    = null
        destination        = "http.Strict-Transport-Security"
        ignore_if_set      = false
        name               = "HSTS w/o subdomains"
        priority           = 10
        regex              = null
        request_condition  = null
        response_condition = "HSTS w/o subdomain"
        source             = "\"max-age=315360000; preload\""
        substitution       = null
        type               = "response"
    }
    header {
        action             = "set"
        cache_condition    = null
        destination        = "url"
        ignore_if_set      = false
        name               = "Chop off query string"
        priority           = 10
        regex              = null
        request_condition  = "Is Download"
        response_condition = null
        source             = "regsub(req.url, \"\\?.*$\", \"\")"
        substitution       = null
        type               = "request"
    }
    header {
        action             = "set"
        cache_condition    = null
        destination        = "url"
        ignore_if_set      = false
        name               = "Strip Query Strings"
        priority           = 10
        regex              = null
        request_condition  = "Homepage"
        response_condition = null
        source             = "req.url.path"
        substitution       = null
        type               = "request"
    }

    healthcheck {
        check_interval    = 15000
        expected_response = 200
        headers           = []
        host              = "test.python.org"
        http_version      = "1.1"
        initial           = 4
        method            = "HEAD"
        name              = "HAProxy Status"
        path              = "/_haproxy_status"
        threshold         = 3
        timeout           = 5000
        window            = 5
    }

    logging_datadog {
      name               = "ratelimit-debug"
      token              = var.DATADOG_API_KEY
      region             = "US"
    }

    logging_s3 {
      name               = "psf-fastly-logs"
      bucket_name        = "psf-fastly-logs-eu-west-1"
      domain             = "s3-eu-west-1.amazonaws.com"
      path               = "/www-python-org/%Y/%m/%d/"
      period             = 3600
      gzip_level         = 9
      # %h "%{now}V" %l "%{req.request}V %{req.url}V" %{req.proto}V %>s %{resp.http.Content-Length}V %{resp.http.age}V "%{resp.http.x-cache}V" "%{resp.http.x-cache-hits}V" "%{req.http.content-type}V" "%{req.http.accept-language}V" "%{cstr_escape(req.http.user-agent)}V"
      format             = "%%h \"%%{now}V\" %%l \"%%{req.request}V %%{req.url}V\" %%{req.proto}V %%>s %%{resp.http.Content-Length}V %%{resp.http.age}V \"%%{resp.http.x-cache}V\" \"%%{resp.http.x-cache-hits}V\" \"%%{req.http.content-type}V\" \"%%{req.http.accept-language}V\" \"%%{cstr_escape(req.http.user-agent)}V\""
      timestamp_format   = "%Y-%m-%dT%H:%M:%S.000"
      redundancy         = "standard"
      format_version     = 2
      message_type       = "classic"
      compression_codec  = "gzip"
      access_key         = var.AWS_ACCESS_KEY_ID
      secret_key         = var.AWS_SECRET_ACCESS_KEY
    }

    logging_syslog {
      name               = "syslog"
      address            = "cdn-logs.nyc1.psf.io"
      port               = 514
      # %h "%{now}V" %l "%{req.request}V %{req.url}V" %{req.proto}V %>s %{resp.http.Content-Length}V %{resp.http.age}V "%{resp.http.x-cache}V" "%{resp.http.x-cache-hits}V" "%{req.http.content-type}V" "%{req.http.accept-language}V" "%{cstr_escape(req.http.user-agent)}V"
      format             = "%%h \"%%{now}V\" %%l \"%%{req.request}V %%{req.url}V\" %%{req.proto}V %%>s %%{resp.http.Content-Length}V %%{resp.http.age}V \"%%{resp.http.x-cache}V\" \"%%{resp.http.x-cache-hits}V\" \"%%{req.http.content-type}V\" \"%%{req.http.accept-language}V\" \"%%{cstr_escape(req.http.user-agent)}V\""
    }

    product_enablement {
        bot_management     = true
        brotli_compression = false
        domain_inspector   = true
        image_optimizer    = false
        name               = null
        origin_inspector   = true
        websockets         = false
    }

    rate_limiter {
        action               = "log_only"
        client_key           = "client.ip"
        feature_revision     = 1
        http_methods         = "GET,PUT,TRACE,POST,HEAD,DELETE,PATCH,OPTIONS"
        logger_type          = "datadog"
        name                 = "test.python.org backends"
        penalty_box_duration = 2
        ratelimiter_id       = "..." # TODO: create specific one for ngwaf test service? prod one is 5S7R6aG8KoT6QqtXFd1Nfk
        response_object_name = null
        rps_limit            = 10
        uri_dictionary_name  = null
        window_size          = 10

        response {
            content      = <<-EOT
                <html>
                        <head>
                                <title>Too Many Requests</title>
                        </head>
                        <body>
                                <p>Too Many Requests</p>
                        </body>
                </html>
            EOT
            content_type = "text/html"
            status       = 429
        }
    }

    request_setting {
        action            = null
        bypass_busy_wait  = false
        default_host      = null
        force_miss        = false
        force_ssl         = true
        geo_headers       = false # ! DEPRECATED
        hash_keys         = null
        max_stale_age     = 86400
        name              = "Default cache policy"
        request_condition = null
        timer_support     = false
        xff               = "append"
    }
    request_setting {
        action            = "pass"
        bypass_busy_wait  = false
        default_host      = null
        force_miss        = false
        force_ssl         = false
        geo_headers       = false # ! DEPRECATED
        hash_keys         = null
        max_stale_age     = 60
        name              = "Force Pass"
        request_condition = "Uncacheable URLs"
        timer_support     = false
        xff               = "append"
    }

    response_object {
        cache_condition   = null
        content           = null
        content_type      = null
        name              = "www redirect"
        request_condition = "apex"
        response          = "Moved Permanently"
        status            = 301
    }
    response_object {
        cache_condition   = null
        content           = null
        content_type      = "text/html"
        name              = "Generated by IP block list"
        request_condition = "Generated by IP block list"
        response          = "Forbidden"
        status            = 403
    }
}
